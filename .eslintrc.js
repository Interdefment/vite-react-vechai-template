'use strict';

module.exports = {
    env: {
        'browser': true,
        'node': true,
        'commonjs': true,
        'es2021': true,
        'jest/globals': true,
    },
    plugins: [ 'jest',
        'react',
        'react-hooks',
        '@typescript-eslint' ],
    extends: [ 'plugin:react-hooks/recommended',
        'plugin:react/recommended',
        'plugin:jest/recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:@typescript-eslint/eslint-recommended',
        'plugin:import/recommended',
        'plugin:import/typescript', //   "plugin:react/jsx-runtime"
        // 'plugin:putout/recommended',
    ],
    parser: '@typescript-eslint/parser',
    parserOptions: {
        sourceType: 'module',
        ecmaVersion: 2021,
        ecmaFeatures: {
            arrowFunctions: true,
            blockBindings: true,
            classes: true,
            defaultParams: true,
            destructuring: true,
            forOf: true,
            generators: false,
            modules: true,
            objectLiteralComputedProperties: true,
            objectLiteralDuplicateProperties: false,
            objectLiteralShorthandMethods: true,
            objectLiteralShorthandProperties: true,
            regexUFlag: true,
            regexYFlag: true,
            restParams: true,
            spread: true,
            superInFunctions: true,
            templateStrings: true,
            unicodeCodePointEscapes: true,
            globalReturn: true,
            experimentalObjectRestSpread: true,
            jsx: true,
        },
    },
    rules: {
        'quotes': [ 'error', 'single' ],
        'react/prop-types': 'off',
        'spaced-comment': [ 'error', 'always', { markers: [ '/' ]}],
        'newline-before-return': 'error',
        'indent': [ 'error', 4 ],
        'no-tabs': 'error',
        'import/order': [ 'error', {
            'groups': [ 'builtin', 'external', 'internal' ],
            'pathGroups': [{
                pattern: 'react',
                group: 'external',
                position: 'before',
            }],
            'pathGroupsExcludedImportTypes': [ 'react' ],
            'newlines-between': 'always',
            'alphabetize': { order: 'asc', caseInsensitive: true },
        }],
        'no-trailing-spaces': 'error',
        'comma-dangle': [ 'error', 'always-multiline' ],
        '@typescript-eslint/explicit-module-boundary-types': 'off',
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        'linebreak-style': [ 'error', require('os').EOL === '\r\n' ? 'windows' : 'unix' ],
        'max-len': [ 'warn', 180 ],
        'semi': [ 'error', 'always' ],
        'no-multiple-empty-lines': 'error',
        'object-curly-spacing': 0,
        '@typescript-eslint/object-curly-spacing': [ 'error', 'always', {
            arraysInObjects: false,
            objectsInObjects: false,
        }],
        'array-bracket-spacing': [ 'error', 'always', {
            arraysInArrays: false,
            objectsInArrays: false,
        }],
        'array-element-newline': [ 'error', 'consistent' ],
        'arrow-parens': 'error',
        'newline-per-chained-call': 'error',
        'key-spacing': 'error',
        'comma-spacing': [ 'error', { 'before': false, 'after': true }],
        'object-curly-newline': [ 'error', {
            ObjectExpression: {
                multiline: true,
                consistent: true,
            },
            ObjectPattern: {
                consistent: true,
                multiline: true,
            },
            ImportDeclaration: {
                multiline: true,
                consistent: true,
                minProperties: 3,
            },
            ExportDeclaration: {
                multiline: true,
                consistent: true,
                minProperties: 3,
            },
        }],
        'object-property-newline': [ 'error', { allowAllPropertiesOnSameLine: true }],
        'eol-last': 'error',
        'no-extra-parens': [ 'error', 'all', { ignoreJSX: 'all', nestedBinaryExpressions: false }],
        'getter-return': 'error',
        'no-console': 'warn',
        'jsx-quotes': [ 'error', 'prefer-single' ],


        'react/button-has-type': 'error',
        'react/destructuring-assignment': 'warn',
        'react/function-component-definition': [ 'error', { namedComponents: 'arrow-function' }],
        'react/no-danger': 'warn',
        'react/self-closing-comp': 'error',
        'react/jsx-boolean-value': [ 'error', 'never' ],
        'react/jsx-closing-bracket-location': [ 'error', {
            nonEmpty: 'after-props',
            selfClosing: 'tag-aligned',
        }],
        'react/jsx-closing-tag-location': 'error',
        'react/jsx-curly-brace-presence': [ 'error', {
            props: 'never',
            children: 'ignore',
        }],
        'react/jsx-curly-newline': [ 'error', 'consistent' ],
        'react/jsx-curly-spacing': [ 'error', {
            when: 'never',
            children: { when: 'always' },
        }],
        'react/jsx-equals-spacing': [ 'error', 'never' ],
        'react/jsx-filename-extension': [ 'error', { extensions: [ '.tsx', '.jsx' ]}],
        'react/jsx-first-prop-new-line': [ 'error', 'multiline-multiprop' ],
        'react/jsx-fragments': [ 'error', 'syntax' ],
        'react/jsx-indent': [ 'error', 4 ],
        'react/jsx-indent-props': [ 'error', 4 ],
        'react/jsx-no-useless-fragment': 'error',
        'react/jsx-pascal-case': 'error',
        'react/jsx-props-no-multi-spaces': 'error',
        'react/jsx-props-no-spreading': 0,
        'react/jsx-sort-props': [ 'error', {
            callbacksLast: true,
            shorthandFirst: true,
            ignoreCase: true,
            reservedFirst: true,
        }],
        'react/jsx-tag-spacing': [ 'error', {
            closingSlash: 'never',
            beforeSelfClosing: 'always',
            afterOpening: 'never',
            beforeClosing: 'never',
        }],
        'react/jsx-wrap-multilines': [ 'error', {
            declaration: 'parens-new-line',
            assignment: 'parens-new-line',
            return: 'parens-new-line',
            arrow: 'parens-new-line',
            condition: 'ignore',
            logical: 'ignore',
            prop: 'ignore',
        }],
    },
    settings: {
        'import/resolver': { node: { moduleDirectory: [ 'node_modules', './' ]}},
        'react': { version: 'detect' },
    },
};

